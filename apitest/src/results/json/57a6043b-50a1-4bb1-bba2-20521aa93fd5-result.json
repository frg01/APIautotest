{"name": "test_api_request[each_case1]", "status": "skipped", "statusDetails": {"message": "XFAIL\n\nAssertionError: assert 200 == 500\n +  where 200 = <Response [200]>.status_code", "trace": "self = <apitest.src.testScript.test_basic_api.TestAPI object at 0x000000000460A490>\neach_case = {'data': None, 'expected_result': 500, 'headers': {'Content-Type': 'application/x-www-form-urlencoded'}, 'json': None, ...}, setup_teardown = None\n\n    @pytest.mark.xfail #这个装饰器的使用可以让pytest在断言失败后不去报告大量的失败信息\n    @pytest.mark.demo\n    @pytest.mark.parametrize('each_case',read_yaml('D:/project/pythonProject/APIautotest/apitest/src/data/users.yaml','users'))\n    def test_api_request(self,each_case,setup_teardown):\n        \"\"\"\n        对参数化数据进行解析,由于each_case是一个字典，setup_teardown时一个夹具，\n        在参数化的过程中，只需要将each_case,setup_teardown一起传入，夹具会自己去找each_case传入夹具执行\n        \"\"\"\n    \n>       self._api_request(**each_case)\n\napitest\\src\\testScript\\test_basic_api.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <apitest.src.testScript.test_basic_api.TestAPI object at 0x000000000460A490>, url = 'https://www.baidu.com/', method = 'GET'\nheaders = {'Content-Type': 'application/x-www-form-urlencoded'}, params = None, data = None, json = None, num_attempts = 2, expected_result = 500\n\n    def _api_request(self,url,method='GET',headers=None,params=None,data=None,json=None,num_attempts=1,expected_result=200):\n        \"\"\"\n            :param url: API 的 URL\n            :param method: 请求方法，默认为 'GET'\n            :param headers: 请求头部信息，可为 None  (requests默认接收字典)\n            :param params: 请求的 URL 参数，可为 None   (requests默认接收字典)\n            :param data: 请求的表单数据，可为 None\n            :param json: 请求的 JSON 数据，可为 None\n            :param num_attempts: 请求重试次数，默认为 1\n            :param expected_result: 预期 HTTP请求返回的结果，数字去判断状态码 默认为 200，其他情况下使用正则表达式去判断请求体中匹配成功的信息\n                    这里的正则匹配限制较为宽泛，所以要注意预期结果的填写，不要能匹配到多个，断言会失准\n            :return: API 响应对象\n        \"\"\"\n    \n    \n        for attempt in range(num_attempts):\n    \n            request_params = {\n                \"method\": method,\n                \"url\": url,\n                \"headers\": headers,\n                \"params\": params,\n                \"data\": data,\n                \"json\": json\n            }\n    \n            allure.attach(\"发送请求,请求参数为：\", request_params)\n            # 发送请求\n            response = requests.request(**request_params)\n            # 设置返回结果编码，防止中文乱码\n            response.encoding = \"utf-8\"\n    \n    \n            # 判断是返回的是html还是json\n            content_type = response.headers.get('Content-Type', '').lower()\n    \n            #下面进行接口返回四种情况的处理及断言，状态码、json、html、其他\n            body = response.text\n    \n            #判断expected_result是否为数字\n            if isinstance(expected_result,int):\n                allure.attach(\"请求响应,response状态码为：\",response.status_code,\"期望状态码：\",expected_result)\n                print(f\"第{attempt+1}次请求响应,response状态码为：\",response.status_code,\"期望状态码：\",expected_result)\n>               assert response.status_code == expected_result\nE               assert 200 == 500\nE                +  where 200 = <Response [200]>.status_code\n\napitest\\src\\testScript\\test_basic_api.py:97: AssertionError"}, "description": "\n        对参数化数据进行解析,由于each_case是一个字典，setup_teardown时一个夹具，\n        在参数化的过程中，只需要将each_case,setup_teardown一起传入，夹具会自己去找each_case传入夹具执行\n        ", "attachments": [{"name": {"method": "GET", "url": "https://www.baidu.com/", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": null, "data": null, "json": null}, "source": "84ec922e-b3ad-4055-9e99-25e6ab8aff20-attachment.attach"}, {"name": 200, "source": "30141741-4639-4404-83b2-8a5a87164ebf-attachment.500", "type": "期望状态码："}], "parameters": [{"name": "each_case", "value": "{'url': 'https://www.baidu.com/', 'method': 'GET', 'headers': {'Content-Type': 'application/x-www-form-urlencoded'}, 'params': None, 'data': None, 'json': None, 'num_attempts': 2, 'expected_result': 500}"}], "start": 1707289251826, "stop": 1707289252175, "uuid": "d2039b97-c2cb-4ee4-8ddd-b5a7bc72b2a6", "historyId": "a1c32ef19da500d0c9138c390e822d73", "testCaseId": "073c75dc27535e91667711b2b9c5d8e4", "fullName": "apitest.src.testScript.test_basic_api.TestAPI#test_api_request", "labels": [{"name": "tag", "value": "demo"}, {"name": "tag", "value": "@pytest.mark.xfail"}, {"name": "parentSuite", "value": "apitest.src.testScript"}, {"name": "suite", "value": "test_basic_api"}, {"name": "subSuite", "value": "TestAPI"}, {"name": "host", "value": "M70D1RJP"}, {"name": "thread", "value": "36676-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "apitest.src.testScript.test_basic_api"}]}